swagger: "2.0"
info:
  version: "1.0.0"
  title: User API
  description: API for managing users
host: localhost:3000
basePath: /
schemes:
  - http
paths:
  /api/users:
    post:
      summary: Create a new user
      tags:
        - Users
      description: ""
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: The user to create
          schema:
            type: object
            required:
              - fullname
              - email
              - username
              - password
              - phoneNumber
              - role_Id
            properties:
              fullname:
                type: string
              email:
                type: string
              username:
                type: string
              password:
                type: string
              phoneNumber:
                type: string
              role_Id:
                type: string
      responses:
        "201":
          description: User created
        "400":
          description: Invalid input
  /api/users/update-password:
    post:
      summary: Update user password
      tags:
        - Users
      description: This endpoint allows a user to update their password after successful email verification.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: passwordUpdate
          description: The new password for the user
          required: true
          schema:
            type: object
            properties:
              newpassword:
                type: string
                description: The new password for the user account.
      responses:
        "200":
          description: Password updated successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: "xác thực mail thành công"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized, token missing or invalid
  /api/users/login:
    post:
      summary: Authenticate user and return JWT
      tags:
        - Users
      description: >
        This endpoint authenticates a user by their email and password, and returns a JWT if the authentication is successful.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: credentials
          description: User's login credentials
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
              password:
                type: string
      responses:
        "200":
          description: Authentication successful, returns JWT
          schema:
            type: object
            properties:
              token:
                type: string
                description: JWT for authenticated user
        "401":
          description: Authentication failed due to invalid email or password
        "500":
          description: Internal server error
  /api/users/change-password:
    post:
      summary: Change user password
      tags:
        - Users
      description: This endpoint allows authenticated users to change their password by providing the old password and the new password.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: JWT Token
        - in: body
          name: passwordDetails
          description: Old and new password details
          required: true
          schema:
            type: object
            required:
              - oldPassword
              - newPassword
            properties:
              oldPassword:
                type: string
                format: password
              newPassword:
                type: string
                format: password
      responses:
        "200":
          description: Password changed successfully
        "401":
          description: Unauthorized or old password is incorrect
        "404":
          description: User not found
        "500":
          description: Internal server error
  /api/users/sendmaildemo:
    post:
      summary: Send a verification email to the user
      tags:
        - Users
      description: Sends a verification email to the user specified by the email in the request body.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Email of the user to send the verification email to
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
      responses:
        "200":
          description: Verification email sent successfully
          schema:
            type: object
            properties:
              message:
                type: string
        "401":
          description: Email not found
          schema:
            type: object
            properties:
              message:
                type: string
        "500":
          description: Error sending email
          schema:
            type: object
            properties:
              message:
                type: string
  /api/roles:
    post:
      summary: Create a new role
      tags:
        - Roles
      description: This endpoint allows authenticated users to create a new role.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: JWT Token
        - in: body
          name: roleDetails
          description: Role details
          required: true
          schema:
            type: object
            required:
              - Name
              - Description
              - isAdmin
              - listClaim
            properties:
              Name:
                type: string
              Description:
                type: string
              isAdmin:
                type: boolean
              listClaim:
                type: array
                items:
                  type: string
      responses:
        "201":
          description: Role created successfully
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                $ref: "#/definitions/Role"
        "400":
          description: Role already exists or invalid input data
          schema:
            type: object
            properties:
              message:
                type: string
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
    get:
      summary: Get a company by ID
      tags:
        - Company
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the company to retrieve
          type: string
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Company"
        "500":
          description: Error getting company
          schema:
            type: object
            properties:
              message:
                type: string
              error:
                type: string
  /api/companies:
    post:
      summary: Create a new company
      tags:
        - Companies
      description: This endpoint allows authenticated users to create a new company.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: JWT Token
        - in: body
          name: companyDetails
          description: Company details
          required: true
          schema:
            type: object
            required:
              - companyName
              - address
              - phoneNumber
              - userNameAdmin
              - passwordAdmin
              - emailCompany
              - taxCompany
              - countryCode
            properties:
              companyName:
                type: string
              address:
                type: string
              phoneNumber:
                type: string
              userNameAdmin:
                type: string
              passwordAdmin:
                type: string
              subscriptionId:
                type: string
              userId:
                type: string
              emailCompany:
                type: string
              taxCompany:
                type: string
              countryCode:
                type: string
              imageCompany:
                type: string
              startDateSubs:
                type: string
                format: date-time
      responses:
        "201":
          description: Company created successfully
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                # Specify the company data structure here
        "400":
          description: Company already exists or invalid input data
          schema:
            type: object
            properties:
              message:
                type: string
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
    get:
      summary: Get all companies
      tags:
        - Companies
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: JWT Token
      responses:
        "200":
          description: Company data retrieved successfully
          schema:
            type: object
            # Specify the company data structure here
        "404":
          description: Company not found
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
  /api/companies/{id}:
    get:
      summary: Get a company by its ID
      tags:
        - Companies
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: JWT Token
        - in: path
          name: id
          type: string
          required: true
          description: Unique identifier of the company
      responses:
        "200":
          description: Company data retrieved successfully
          schema:
            type: object
            # Specify the company data structure here
        "404":
          description: Company not found
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

    put:
      summary: Update a company
      tags:
        - Companies
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: JWT Token
        - in: path
          name: id
          type: string
          required: true
          description: Unique identifier of the company to update
        - in: body
          name: companyDetails
          description: Company details to update
          schema:
            type: object
            # Specify the company properties that can be updated
      responses:
        "200":
          description: Company updated successfully
        "400":
          description: Invalid input data
        "404":
          description: Company not found
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

    delete:
      summary: Delete a company
      tags:
        - Companies
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: JWT Token
        - in: path
          name: id
          type: string
          required: true
          description: Unique identifier of the company to delete
      responses:
        "200":
          description: Company deleted successfully
        "404":
          description: Company not found
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
  /subscriptions:
    post:
      summary: Create Subscription
      description: Use to create subscription
      tags: [ Subscriptions ]
      produces:
        - application/json
      parameters:
        - in: body
          name: subscription
          description: Subscription object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Subscription'
      responses:
        '201':
          description: Subscription created successfully
          schema:
            $ref: '#/definitions/Subscription'
        '500':
          description: Error at creating subscription
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update Subscription
      description: Use to update subscription
      tags: [ Subscriptions ]
      produces:
        - application/json
      parameters:
        - in: body
          name: subscription
          description: Subscription object that needs to be updated
          required: true
          schema:
            $ref: '#/definitions/Subscription'
      responses:
        '200':
          description: Subscription updated successfully
          schema:
            $ref: '#/definitions/SuccessMessage'
        '404':
          description: Subscription not found
          schema:
            $ref: '#/definitions/ErrorMessage'
        '500':
          description: Error at update subscription
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete Subscription
      description: Use to delete subscription
      tags: [ Subscriptions ]
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          description: ID of the subscription to delete
          required: true
          type: string
      responses:
        '200':
          description: Subscription deleted successfully
          schema:
            $ref: '#/definitions/SuccessMessage'
        '404':
          description: Subscription not found
          schema:
            $ref: '#/definitions/ErrorMessage'
        '500':
          description: Error at delete subscription
          schema:
            $ref: '#/definitions/Error'
  /transactions/{id}:
    get:
      summary: Get Transaction by ID
      description: Use to get transaction by ID
      tags: [ Transactions ]
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of the transaction to retrieve
          required: true
          type: string
      responses:
        '200':
          description: Transaction retrieved successfully
          schema:
            $ref: '#/definitions/Transaction'
        '404':
          description: Transaction not found
          schema:
            $ref: '#/definitions/ErrorMessage'
        '500':
          description: Error at getting transaction
          schema:
            $ref: '#/definitions/Error'
  /transactions/user/{id}:
      get:
        summary: Get Transactions by User ID
        description: Use to get transactions by user ID
        tags: [ Transactions ]
        produces:
          - application/json
        parameters:
          - in: path
            name: id
            description: ID of the user whose transactions to retrieve
            required: true
            type: string
        responses:
          '200':
            description: Transactions retrieved successfully
            schema:
              $ref: '#/definitions/TransactionList'
          '404':
            description: Transactions not found
            schema:
              $ref: '#/definitions/ErrorMessage'
          '500':
            description: Error at getting transactions
            schema:
              $ref: '#/definitions/Error'
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    type: object
    properties:
      email:
        type: string
      username:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
      emailConfirmed:
        type: boolean
      phoneConfirmed:
        type: boolean
      isDelete:
        type: boolean
      createTime:
        type: string
        format: date-time
      updateTime:
        type: string
        format: date-time
      isActive:
        type: boolean
  Role:
    type: object
    properties:
      Name:
        type: string
      Description:
        type: string
      isAdmin:
        type: boolean
      listClaim:
        type: array
  Company:
    type: object
    properties:
      id:
        type: string
      companyName:
        type: string
      address:
        type: string
      phoneNumber:
        type: string
      userNameAdmin:
        type: string
      passwordAdmin:
        type: string
      subscriptionId:
        type: string
      userId:
        type: string
      emailCompany:
        type: string
      taxCompany:
        type: string
      countryCode:
        type: string
      imageCompany:
        type: string
      startDateSubs:
        type: string
  CompanyDelete:
    type: object
    properties:
      id:
        type: string
  Subscription:
    type: object
    properties:
      name:
        type: string
      domainName:
        type: string
      total_invoices:
        type: integer
      total_storage:
        type: integer
      image:
        type: string
      description:
        type: string
      monthly_prices:
        type: array
        items:
          type: number
      yearly_prices:
        type: array
        items:
          type: number
      total:
        type: number
  Transaction:
    type: object
    properties:
      _id:
        type: string
      userId:
        type: string
      subcriptionId:
        type: string
      companyId:
        type: string
      amount:
        type: number
      startDate:
        type: string
        format: date-time
      endDate:
        type: string
        format: date-time
      isMonthly:
        type: boolean
      response_data:
        type: object
      gateway:
        type: string
      status:
        type: string
      note:
        type: string
      phone:
        type: string
      username:
        type: string
      companyName:
        type: string
  TransactionList:
      type: array
      items:
        $ref: '#/definitions/Transaction'
  SuccessMessage:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
  ErrorMessage:
      type: object
      properties:
        message:
          type: string
        data:
          type: string
  Error:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
